import{k as r}from"./DRerZXE8.js";const t={"email already exists":"L'adresse e-mail est déjà utilisée.","The password field format is invalid":"Le format du champ mot de passe est invalide.","The confirmPassword field and password field must be the same":"Le champ de confirmation du mot de passe et le champ mot de passe doivent être identiques.","The username field must be defined":"Le champ nom d’utilisateur doit être défini.","The email field must be defined":"Le champ d'adresse e-mail doit être défini.","The password field must be defined":"Le champ mot de passe doit être défini.","The email field must be a valid email address":"Le champ d'adresse e-mail doit être une adresse e-mail valide.","User not found or invalid":"Utilisateur non trouvé ou invalide.","The email has already been taken":"L'adresse e-mail a déjà été prise.","Invalid user credentials":"Identifiants utilisateur invalides, veuillez réessayer.",'insert into "users" ("category", "created_at", "email", "password", "updated_at", "username", "uuid") values ($1, $2, $3, $4, $5, $6, $7) returning "id" - duplicate key value violates unique constraint "users_email_unique"':"L'adresse e-mail est déjà utilisée, veuillez en choisir une autre."},s=r([]),o=e=>{if("errors"in e&&Array.isArray(e.errors))e.errors.forEach(a=>{const d={id:Date.now()+Math.random(),...a,message:t[a.message]||a.message};s.value.push(d),setTimeout(()=>{s.value=s.value.filter(n=>n.id!==d.id)},5e3)});else if("message"in e){const a={id:Date.now()+Math.random(),message:t[e.message]||e.message};s.value=[a],setTimeout(()=>{s.value=[]},5e3)}else console.warn("Format d'erreur non supporté:",e)},i=r(void 0),u=e=>{i.value=e,setTimeout(()=>{i.value=void 0},5e3)},m=()=>({errorMessageArray:s,sucessToaster:i,addError:o,addSuccess:u});export{m as u};
