import{g as p,u as h,z as c,ap as f}from"./4RQtgJZ9.js";import{u}from"./D_xRysGK.js";const m={"email already exists":"L'adresse e-mail est déjà utilisée.","The password field format is invalid":"Le format du champ mot de passe est invalide.","The confirmPassword field and password field must be the same":"Le champ de confirmation du mot de passe et le champ mot de passe doivent être identiques.","The username field must be defined":"Le champ nom d’utilisateur doit être défini.","The email field must be defined":"Le champ d'adresse e-mail doit être défini.","The password field must be defined":"Le champ mot de passe doit être défini.","The email field must be a valid email address":"Le champ d'adresse e-mail doit être une adresse e-mail valide.","User not found or invalid":"Utilisateur non trouvé ou invalide.","The email has already been taken":"L'adresse e-mail a déjà été prise."},n=p([]),g=e=>{if("errors"in e&&Array.isArray(e.errors))e.errors.forEach(r=>{const i={id:Date.now()+Math.random(),...r,message:m[r.message]||r.message};n.value.push(i),setTimeout(()=>{n.value=n.value.filter(l=>l.id!==i.id)},5e3)});else if("message"in e){const r={id:Date.now()+Math.random(),message:m[e.message]||e.message};n.value=[r],setTimeout(()=>{n.value=[]},5e3)}else console.warn("Format d'erreur non supporté:",e)},v=()=>({errorMessageArray:n,addError:g}),w=()=>{const e=f(),r=h(),{addError:i}=v();return{sendRegister:async a=>{try{const{data:s}=await c.post(`${e.public.apiUrl}/auth/register`,a);return s}catch(s){i(s)}},sendLogin:async a=>{var s;try{const{data:t}=await c.post(`${e.public.apiUrl}/auth/login`,a);if((s=t==null?void 0:t.token)!=null&&s.token){const d=u("token",{maxAge:2592e3,path:"/",sameSite:"strict",secure:!0});return d.value=t.token,t}}catch(t){i(t)}},sendLogout:async()=>{try{const a=u("token"),{data:s}=await c.post(`${e.public.apiUrl}/auth/logout`,null,{headers:{Authorization:`Bearer  ${a}`,"Content-Type":"application/json"}});s&&await r.push("/")}catch(a){i(a)}},checkEmail:async a=>{var s,t,d;try{const{data:o}=await c.get(`${e.public.apiUrl}/auth/verify-email/${a}`);if(console.log("Making request to:",a),console.log("API URL base:",e.public.apiUrl),o)return o}catch(o){console.error("Error in checkEmail:",o),i(o),console.error("Response status:",(s=o.response)==null?void 0:s.status),console.error("Response data:",(t=o.response)==null?void 0:t.data),console.error("Request URL:",(d=o.config)==null?void 0:d.url)}}}};export{v as a,w as u};
