import{g as p,u as h,z as n,ap as f}from"./Bzbf9dWs.js";import{u}from"./Prf7AdiZ.js";const c={"email already exists":"L'adresse e-mail est déjà utilisée.","The password field format is invalid":"Le format du champ mot de passe est invalide.","The confirmPassword field and password field must be the same":"Le champ de confirmation du mot de passe et le champ mot de passe doivent être identiques.","The username field must be defined":"Le champ nom d’utilisateur doit être défini.","The email field must be defined":"Le champ d'adresse e-mail doit être défini.","The password field must be defined":"Le champ mot de passe doit être défini.","The email field must be a valid email address":"Le champ d'adresse e-mail doit être une adresse e-mail valide.","User not found or invalid":"Utilisateur non trouvé ou invalide.","The email has already been taken":"L'adresse e-mail a déjà été prise."},i=p([]),g=s=>{if("errors"in s&&Array.isArray(s.errors))s.errors.forEach(o=>{const r={id:Date.now()+Math.random(),...o,message:c[o.message]||o.message};i.value.push(r),setTimeout(()=>{i.value=i.value.filter(d=>d.id!==r.id)},5e3)});else if("message"in s){const o={id:Date.now()+Math.random(),message:c[s.message]||s.message};i.value=[o],setTimeout(()=>{i.value=[]},5e3)}else console.warn("Format d'erreur non supporté:",s)},v=()=>({errorMessageArray:i,addError:g}),T=()=>{const s=f(),o=h(),{addError:r}=v();return{sendRegister:async a=>{try{const{data:e}=await n.post(`${s.public.apiUrl}/auth/register`,a);return e}catch(e){r(e)}},sendLogin:async a=>{var e;try{const{data:t}=await n.post(`${s.public.apiUrl}/auth/login`,a);console.log("Login response:",t);const l=(e=t==null?void 0:t.token)==null?void 0:e.token;if(l){const m=u("token",{maxAge:2592e3,path:"/",sameSite:"strict",secure:!0,httpOnly:!1});return m.value=l,console.log("Token stored successfully"),t}else throw new Error("Token non reçu du serveur")}catch(t){throw console.error("Login error:",t),r(t),t}},sendLogout:async()=>{try{const a=u("token"),{data:e}=await n.post(`${s.public.apiUrl}/auth/logout`,null,{headers:{Authorization:`Bearer  ${a}`,"Content-Type":"application/json"}});e&&await o.push("/")}catch(a){r(a)}},checkEmail:async a=>{try{const{data:e}=await n.get(`${s.public.apiUrl}/auth/verify-email/${a}`);if(e)return e}catch(e){console.error("Error in checkEmail:",e),r(e)}}}};export{v as a,T as u};
