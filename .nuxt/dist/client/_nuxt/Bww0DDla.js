import{j as p,i as f,z as d,ap as v}from"./lwjdZeOp.js";import{u as l}from"./CXUWtAVQ.js";const m={"email already exists":"L'adresse e-mail est déjà utilisée.","The password field format is invalid":"Le format du champ mot de passe est invalide.","The confirmPassword field and password field must be the same":"Le champ de confirmation du mot de passe et le champ mot de passe doivent être identiques.","The username field must be defined":"Le champ nom d’utilisateur doit être défini.","The email field must be defined":"Le champ d'adresse e-mail doit être défini.","The password field must be defined":"Le champ mot de passe doit être défini.","The email field must be a valid email address":"Le champ d'adresse e-mail doit être une adresse e-mail valide.","User not found or invalid":"Utilisateur non trouvé ou invalide.","The email has already been taken":"L'adresse e-mail a déjà été prise.","Invalid user credentials":"Identifiants utilisateur invalides, veuillez réessayer."},n=p([]),g=s=>{if("errors"in s&&Array.isArray(s.errors))s.errors.forEach(t=>{const i={id:Date.now()+Math.random(),...t,message:m[t.message]||t.message};n.value.push(i),setTimeout(()=>{n.value=n.value.filter(o=>o.id!==i.id)},5e3)});else if("message"in s){const t={id:Date.now()+Math.random(),message:m[s.message]||s.message};n.value=[t],setTimeout(()=>{n.value=[]},5e3)}else console.warn("Format d'erreur non supporté:",s)},u=p(void 0),w=s=>{u.value=s,setTimeout(()=>{u.value=void 0},5e3)},y=()=>({errorMessageArray:n,sucessToaster:u,addError:g,addSuccess:w}),R=()=>{const s=v(),t=f(),{addError:i,addSuccess:o}=y();return{sendRegister:async a=>{try{const{data:e}=await d.post(`${s.public.apiUrl}/auth/register`,a);if(e)return o("Inscription réussie, veuillez vérifier votre email pour confirmer votre compte."),await t.push("/auth/login"),e}catch(e){i(e)}},sendLogin:async a=>{var e;try{const{data:r}=await d.post(`${s.public.apiUrl}/auth/login`,a),c=(e=r==null?void 0:r.token)==null?void 0:e.token;if(c){const h=l("token",{maxAge:2592e3,path:"/",sameSite:"strict",secure:!0,httpOnly:!1});return h.value=c,r}else throw new Error("Token non reçu du serveur")}catch(r){throw console.error("Login error:",r),i(r),r}},sendLogout:async()=>{try{const a=l("token"),{data:e}=await d.post(`${s.public.apiUrl}/auth/logout`,null,{headers:{Authorization:`Bearer  ${a}`,"Content-Type":"application/json"}});e&&(o("Déconnexion réussie."),await t.push("/"))}catch(a){i(a)}},checkEmail:async a=>{try{const{data:e}=await d.get(`${s.public.apiUrl}/auth/verify-email/${a}`);if(e)return o("Email vérifié avec succès, vous pouvez maintenant vous connecter."),e}catch(e){console.error("Error in checkEmail:",e),i(e)}},sendNewPassword:async a=>{try{const{data:e}=await d.post(`${s.public.apiUrl}/auth/forgot-password`,{email:a});if(e)return o("Un email de réinitialisation de mot de passe a été envoyé."),e}catch(e){i(e)}}}};export{R as a,y as u};
