{"file":"index-BkClx3X_.js","mappings":";AAUO,MAAM,kBAAkB,YAAY;AAAA,EACzC,IAAI;AAAA,EACJ,OAAO,OAAqB;AAAA,IAC1B,SAAS,CAAC;AAAA,IACV,gBAAgB;AAAA,IAChB,eAAe;AAAA,EAAA;AAAA,EAEjB,SAAS;AAAA,IACP,YAAY,MAAM,CAAC,YAAyB;AACpC,YAAA,YAAY,QAAQ,UAAU,IAAI,OAAO,CAAC,KAAK,UAAU;AAC7D,eAAO,OAAO,MAAM,aAAa,MAAM,MAAM,SAAS;AAAA,SACrD,CAAC;AACJ,YAAM,UAAU;AAChB,YAAM,MAAM,WAAW;AACvB,aAAO,WAAW;AAAA,IAAA;AAAA,EAEtB;AAAA,EACA,SAAS;AAAA,IACP,MAAM,eAAe;AACf,UAAA;AACF,cAAM,WAAW,MAAMA,cAAM,IAAI,gCAAgC;AACjE,aAAK,UAAU,SAAS;AAAA,eACjB,OAAO;AACd,gBAAQ,MAAM,KAAK;AACnB,cAAM,0BAA0B;AAAA,MAAA;AAAA,IAEpC;AAAA,IACA,MAAM,WAAW,SAAsB;AACjC,UAAA;AACF,cAAM,WAAW,MAAMA,cAAM,KAAK,kCAAkC,OAAO;AACtE,aAAA,QAAQ,KAAK,SAAS,IAAI;AAE/B,eAAO,SAAS;AAAA,eACT,OAAO;AACN,gBAAA,MAAM,yBAAyB,KAAK;AAAA,MAAA;AAAA,IAEhD;AAAA,IACA,MAAM,cAAc,gBAA6B;AAC3C,UAAA;AACI,cAAA,WAAW,MAAMA,cAAM;AAAA,UAC3B,kCAAkC,eAAe,EAAE;AAAA,UACnD;AAAA,QACF;AACQ,gBAAA,IAAI,yBAAyB,QAAQ;AAEvC,cAAA,QAAQ,KAAK,QAAQ,UAAU,CAAC,QAAQ,IAAI,OAAO,eAAe,EAAE;AAC1E,YAAI,UAAU,IAAI;AACX,eAAA,QAAQ,KAAK,IAAI,SAAS;AAAA,QAAA;AAEjC,eAAO,SAAS;AAAA,eACT,OAAO;AACN,gBAAA,MAAM,2BAA2B,KAAK;AAAA,MAAA;AAAA,IAElD;AAAA,IAEA,cAAc,QAAgB;AACvB,WAAA,UAAU,KAAK,QAAQ,OAAO,CAAC,YAAY,QAAQ,OAAO,MAAM;AAAA,IAAA;AAAA,EACvE;AAEJ,CAAC;","names":["axios"],"sources":["../../../../stores/apps/invoice/index.ts"],"sourcesContent":["import type { InvoiceType } from '@/types/apps/InvoiceTypes';\nimport axios from '@/utils/axios';\nimport { defineStore } from 'pinia';\n\ninterface InvoiceState {\n  invoice: InvoiceType[];\n  invoiceContent: number;\n  invoiceSearch: string;\n}\n\nexport const useInvoicestore = defineStore({\n  id: 'invoices',\n  state: (): InvoiceState => ({\n    invoice: [],\n    invoiceContent: 1,\n    invoiceSearch: '',\n  }),\n  getters: {\n    grandTotal: () => (invoice: InvoiceType) => {\n      const subtotal = (invoice.orders ?? []).reduce((sum, order) => {\n        return sum + (order.unitPrice ?? 0) * (order.units ?? 0);\n      }, 0);\n      const vatRate = 0.1;\n      const vat = subtotal * vatRate;\n      return subtotal + vat;\n    },\n  },\n  actions: {\n    async fetchinvoice() {\n      try {\n        const response = await axios.get('/api/data/invoices/invoiceData');\n        this.invoice = response.data; // Ensure data is structured correctly\n      } catch (error) {\n        console.error(error);\n        alert('Failed to fetch invoices');\n      }\n    },\n    async addInvoice(invoice: InvoiceType) {\n      try {\n        const response = await axios.post('/api/data/invoices/invoiceData', invoice);\n        this.invoice.push(response.data);\n\n        return response.data;\n      } catch (error) {\n        console.error('Error adding invoice:', error);\n      }\n    },\n    async updateInvoice(updatedInvoice: InvoiceType) {\n      try {\n        const response = await axios.put(\n          `/api/data/invoices/invoiceData/${updatedInvoice.id}`,\n          updatedInvoice\n        );\n        console.log('Response from update:', response); // This will show the updated data\n\n        const index = this.invoice.findIndex((inv) => inv.id === updatedInvoice.id);\n        if (index !== -1) {\n          this.invoice[index] = response.data; // Update the local store\n        }\n        return response.data;\n      } catch (error) {\n        console.error('Error updating invoice:', error);\n      }\n    },\n\n    deleteinvoice(itemID: number) {\n      this.invoice = this.invoice.filter((invoice) => invoice.id !== itemID);\n    },\n  },\n});\n"],"version":3}