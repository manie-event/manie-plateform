import{g as T,e as w,a as M,m as x,b as y,c as S,d as I}from"./DMok_yIV.js";import{S as u,U as N}from"./tuwxSyZN.js";function z(t,c){const e=u(t),i=u(c),r=e.getTime()-i.getTime();return r<0?-1:r>0?1:r}function R(t){return N(t,Date.now())}function U(t){return c=>{const i=(t?Math[t]:Math.trunc)(c);return i===0?0:i}}function Y(t,c,e){const i=T(),r=(e==null?void 0:e.locale)??i.locale??w,h=z(t,c);if(isNaN(h))throw new RangeError("Invalid time value");const a=Object.assign({},e,{addSuffix:e==null?void 0:e.addSuffix,comparison:h});let m,d;h>0?(m=u(c),d=u(t)):(m=u(t),d=u(c));const o=U((e==null?void 0:e.roundingMethod)??"round"),g=d.getTime()-m.getTime(),f=g/I,O=M(d)-M(m),l=(g-O)/I,D=e==null?void 0:e.unit;let n;if(D?n=D:f<1?n="second":f<60?n="minute":f<x?n="hour":l<y?n="day":l<S?n="month":n="year",n==="second"){const s=o(g/1e3);return r.formatDistance("xSeconds",s,a)}else if(n==="minute"){const s=o(f);return r.formatDistance("xMinutes",s,a)}else if(n==="hour"){const s=o(f/60);return r.formatDistance("xHours",s,a)}else if(n==="day"){const s=o(l/x);return r.formatDistance("xDays",s,a)}else if(n==="month"){const s=o(l/y);return s===12&&D!=="month"?r.formatDistance("xYears",1,a):r.formatDistance("xMonths",s,a)}else{const s=o(l/S);return r.formatDistance("xYears",s,a)}}function _(t,c){return Y(t,R(t),c)}export{_ as f};
