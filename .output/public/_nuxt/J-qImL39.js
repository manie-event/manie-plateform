import{E as h,k as d,h as E,s as k,u as C}from"./DFIvP0J7.js";import{u as L}from"./DAt_JwB_.js";import{u as P}from"./Be4NXUHw.js";const b=h("eventsStore",()=>{const c=d([]),i=d(),f=d([]),l=d([]);return{events:c,answers:i,sectors:f,servicesFiltered:l,setEventsByOrganisator:s=>{c.value=s},setSectors:s=>{f.value.push(...s)},setServicesFiltered:s=>{l.value.push(...s),console.log(l.value,"SERVICEFILTERED")},setQuestionnaireAnswers:s=>{i.value=s}}}),A=c=>({id:c.id,uuid:c.uuid,sector:c.sector,category:c.category,value:c.value,isSelected:!1}),K=()=>{const c=E(),{setProfessionalServices:i,setKeywords:f,setUpdateProfile:l}=c,{professionnalServices:v,keywords:w}=k(c),{setSectors:g}=b(),n=C(),s=d(!1);L("token");const r=P(),p=async()=>{var o,e;try{s.value=!0;let t=1,a=[];for(;;){const u=await(r==null?void 0:r.get(`${n.public.apiUrl}/sector?page=${t}`));if(!((e=(o=u==null?void 0:u.data)==null?void 0:o.data)!=null&&e.length)||(a.push(...u.data.data),t>=u.data.meta.lastPage))break;t++}return console.log(a,"ALL SECTORS"),g(a),a}catch(t){console.error("Error fetching sectors:",t)}finally{s.value=!1}},S=async o=>{try{s.value=!0;const e=await(r==null?void 0:r.get(`${n.public.apiUrl}/sector`));if(e){const t=e.data.data.filter(a=>a.name.toLowerCase()===o.toLowerCase());return await Promise.all([m(t[0].uuid),y(t[0].name)]),s.value=!1,{services:v.value,keywords:w.value}}}catch{throw new Error("No data received from API")}},m=async o=>{try{const e=await(r==null?void 0:r.get(`${n.public.apiUrl}/service`,{params:{q:o,limit:100}}));if(e){const t=e.data.data.filter(a=>a.sectorUuid.toLowerCase()===o.toLowerCase());i(t)}}catch{console.error("No data received from API")}},y=async o=>{s.value=!0;try{const e=await(r==null?void 0:r.get(`${n.public.apiUrl}/keyword`,{params:{q:o,limit:1e3}}));if(e){const t=e.data.data.filter(a=>a.sector.toLowerCase()==o.toLowerCase()).slice(0,100).map(a=>A(a));console.log(t,"Keywords fetched and filtered"),f(t),s.value=!1}}catch(e){console.error("Error fetching keywords:",e)}};return{loading:s,getKeywords:y,getSectors:S,getAllSectors:p,sendProfessionalServices:async o=>{try{const e=await(r==null?void 0:r.post(`${n.public.apiUrl}/professional-service/create`,o));e&&(i(e.data),l(!0))}catch(e){console.error("Error sending professional services:",e)}}}};export{b as e,K as u};
